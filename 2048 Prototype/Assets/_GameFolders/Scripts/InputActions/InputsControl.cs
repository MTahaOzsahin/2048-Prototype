//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_GameFolders/Scripts/InputActions/InputsControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Prototype.Scripts.InputActions
{
    public partial class @InputsControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputsControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputsControl"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""f56ed122-61b1-450c-a5c3-e5fffc204e8f"",
            ""actions"": [
                {
                    ""name"": ""Keyboard"",
                    ""type"": ""Value"",
                    ""id"": ""cf4093c4-aa42-42f7-849c-4889f2b7743b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f08a7303-ba55-4d70-bf24-fe4a66e9b5ac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e7be567e-182f-4534-b424-67fd8b700dd8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ea8bcc7a-64f5-4571-a198-f4ae983e90fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""898407c3-40f0-45e3-acad-f8acba9d91a4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eac245f2-5be3-4873-b99d-5cac856a3ffb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""d3096042-7a9d-4c28-802a-6720b8e6b3ce"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""866b6b77-0f86-43a4-b680-93cfb8b03ad2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f2372db8-9d35-4903-bcb4-b929bffe9e80"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2517ddb9-e62b-4bb9-a4fe-2a6e840abc79"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""11828b88-c1d6-4488-9f05-06ca8f83059b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""id"": ""e6b87bf6-8f61-422f-8dde-8d4df95043c1"",
            ""actions"": [
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""80c1e535-2a4e-4b87-98d5-484b653eeba6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""166ce3a3-0ad2-4907-a4af-041712cb6c69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d4f80eb7-a78c-49a7-8b8f-7f263032cee5"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a50c917b-5025-4757-a121-58ddf08b9a1e"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(pressPoint=0.5,behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_Keyboard = m_Keyboard.FindAction("Keyboard", throwIfNotFound: true);
            // Mobile
            m_Mobile = asset.FindActionMap("Mobile", throwIfNotFound: true);
            m_Mobile_PrimaryPosition = m_Mobile.FindAction("PrimaryPosition", throwIfNotFound: true);
            m_Mobile_PrimaryContact = m_Mobile.FindAction("PrimaryContact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
        private readonly InputAction m_Keyboard_Keyboard;
        public struct KeyboardActions
        {
            private @InputsControl m_Wrapper;
            public KeyboardActions(@InputsControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Keyboard => m_Wrapper.m_Keyboard_Keyboard;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void AddCallbacks(IKeyboardActions instance)
            {
                if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
                @Keyboard.started += instance.OnKeyboard;
                @Keyboard.performed += instance.OnKeyboard;
                @Keyboard.canceled += instance.OnKeyboard;
            }

            private void UnregisterCallbacks(IKeyboardActions instance)
            {
                @Keyboard.started -= instance.OnKeyboard;
                @Keyboard.performed -= instance.OnKeyboard;
                @Keyboard.canceled -= instance.OnKeyboard;
            }

            public void RemoveCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKeyboardActions instance)
            {
                foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);

        // Mobile
        private readonly InputActionMap m_Mobile;
        private List<IMobileActions> m_MobileActionsCallbackInterfaces = new List<IMobileActions>();
        private readonly InputAction m_Mobile_PrimaryPosition;
        private readonly InputAction m_Mobile_PrimaryContact;
        public struct MobileActions
        {
            private @InputsControl m_Wrapper;
            public MobileActions(@InputsControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryPosition => m_Wrapper.m_Mobile_PrimaryPosition;
            public InputAction @PrimaryContact => m_Wrapper.m_Mobile_PrimaryContact;
            public InputActionMap Get() { return m_Wrapper.m_Mobile; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MobileActions set) { return set.Get(); }
            public void AddCallbacks(IMobileActions instance)
            {
                if (instance == null || m_Wrapper.m_MobileActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MobileActionsCallbackInterfaces.Add(instance);
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
            }

            private void UnregisterCallbacks(IMobileActions instance)
            {
                @PrimaryPosition.started -= instance.OnPrimaryPosition;
                @PrimaryPosition.performed -= instance.OnPrimaryPosition;
                @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
                @PrimaryContact.started -= instance.OnPrimaryContact;
                @PrimaryContact.performed -= instance.OnPrimaryContact;
                @PrimaryContact.canceled -= instance.OnPrimaryContact;
            }

            public void RemoveCallbacks(IMobileActions instance)
            {
                if (m_Wrapper.m_MobileActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMobileActions instance)
            {
                foreach (var item in m_Wrapper.m_MobileActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MobileActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MobileActions @Mobile => new MobileActions(this);
        public interface IKeyboardActions
        {
            void OnKeyboard(InputAction.CallbackContext context);
        }
        public interface IMobileActions
        {
            void OnPrimaryPosition(InputAction.CallbackContext context);
            void OnPrimaryContact(InputAction.CallbackContext context);
        }
    }
}
